(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	// ReactElement
	const ReactElement = (type, key, ref, props) => {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'self',
	    };
	    return element;
	};
	const jsxDEV = (type, config) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key' && prop !== null) {
	            key = val + '';
	        }
	        else if (prop === 'ref' && prop !== null) {
	            ref = val + '';
	        }
	        else {
	            if ({}.hasOwnProperty.call(config, prop)) {
	                props[prop] = val;
	            }
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	var index = {
	    version: '0.0.0',
	    /**
	     * 编译时：
	     * jsx语法在babel的作用下会被转化成React.createElement方法的运行,并且传入参数为(type,config)
	     * 这就是为什么我们写了jsx语法的代码,在控制台打印出来是一个对象的原因
	     *
	     */
	    createElement: jsxDEV,
	};

	return index;

}));
