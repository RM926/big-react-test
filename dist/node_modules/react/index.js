(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.react = {}));
})(this, (function (exports) { 'use strict';

	const currentDispatcher = {
	    current: null,
	};
	const resolveDispatcher = () => {
	    const dispatcher = currentDispatcher.current;
	    if (dispatcher === null) {
	        throw new Error('hook只能在函数组件中执行');
	    }
	    return dispatcher;
	};

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	// ReactElement
	const ReactElement = (type, key, ref, props) => {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'self',
	    };
	    return element;
	};
	const jsx = (type, config, ...maybeChildren) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key' && prop !== null) {
	            key = val + '';
	        }
	        else if (prop === 'ref' && prop !== null) {
	            ref = val + '';
	        }
	        else {
	            if ({}.hasOwnProperty.call(config, prop)) {
	                props[prop] = val;
	            }
	        }
	    }
	    const maybeChildrenLength = maybeChildren.length;
	    if (maybeChildrenLength) {
	        if (maybeChildrenLength === 1) {
	            props.children = maybeChildren[0];
	        }
	        else {
	            props.children = maybeChildren;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};
	function isValidElement$1(object) {
	    return (typeof object === 'object' &&
	        object !== null &&
	        object.$$typeof === REACT_ELEMENT_TYPE);
	}

	/**
	 *  * * * * * * * * * * * * * * * * *         * * * * * * * * * * * * * * * * *
	 *  *  Reconciler                   *         *  内部数据共享层                *
	 *  *        * * * * * * * * * *    *         *                               *
	 *  *        * mount 时        *    *         *                               *
	 *  *        *     useState    *    *         *                               *
	 *  *        *     useEffect   *    *         *                               *
	 *  *        *     ...         *    *         *                               *
	 *  *        * * * * * * * * * *    *         *    当前使用的Hooks集合         *
	 *  *                               *         *                               *       * * * * * * * *
	 *  *        * * * * * * * * * *    *         *                               * ----> *    React    *
	 *  *        * update时        *    *         *                               *       * * * * * * * *
	 *  *        *     useState    *    *         *                               *
	 *  *        *     useEffect   *    *         *                               *
	 *  *        *     ...         *    *         *                               *
	 *  *        * * * * * * * * * *    *         *                               *
	 *  *                               *         *                               *
	 *  *        * * * * * * * * * *    *         *                               *
	 *  *        * hook上下文中     *    *         *                               *
	 *  *        *     useState    *    *         *                               *
	 *  *        *     useEffect   *    *         *                               *
	 *  *        *     ...         *    *         *                               *
	 *  *        * * * * * * * * * *    *         *                               *
	 *  *                               *         *                               *
	 *  * * * * * * * * * * * * * * * * *         * * * * * * * * * * * * * * * * *
	 *
	 *
	 */
	const useState = (initialState) => {
	    const dispatcher = resolveDispatcher();
	    return dispatcher.useState(initialState);
	};
	/** 内部数据共享层 */
	const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRE = {
	    currentDispatcher,
	};
	const version = '0.0.0';
	// TODO: 根据环境区分使用jsx/jsxDEV
	const createElement = jsx;
	const isValidElement = isValidElement$1;
	// export default {
	// 	version: '0.0.0',
	// 	/**
	// 	 * 编译时：
	// 	 * jsx语法在babel的作用下会被转化成React.createElement方法的运行,并且传入参数为(type,config)
	// 	 * 这就是为什么我们写了jsx语法的代码,在控制台打印出来是一个对象的原因
	// 	 *
	// 	 */
	// 	createElement: jsxDEV
	// };

	exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRE = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRE;
	exports.createElement = createElement;
	exports.isValidElement = isValidElement;
	exports.useState = useState;
	exports.version = version;

}));
